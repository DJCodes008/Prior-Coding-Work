//
// Instructions: Simply put this code in a compiler and run it to generate random loadouts. Code is built for Window's OS, but the
// only differences is the system pause commands. Simply exit the program when you wish to stop generating loadouts.
//

#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <iostream>
#include "weapons.h"

using namespace std;

int main(void)
{

    while (1)
    {
        subclass();

        classes();

        kinetic();

        energy();

        heavy();

        system("pause");

        cout << endl;
    }

}

//
//weapons header file is included below
//

#include <iostream>
#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <iostream>

int control = 1;
int choice = 0;
int loop = 1;
static int exotic = 0; //Global tracker for the exotic weapon. Only one can be equipped, so if one is already 
                        //selected and exotic is chosen again, the weapon is rerolled

using namespace std;

//Notes about special cases:
//1. Stasis does not have subclass trees, instead has a fragment system
//2. Only one exotic can be equipped
//3. Trace rifles are always exotic, considered auto rifles in game


//////////////////////
// Tree determines the subclass tree for the Arc, Solar, and Void classes
//////////////////////
void tree(void)
{
    time_t seed = time(NULL);

    srand(seed);

    choice = 1 + (rand() % 3);

    switch (choice) {

    case 1:
        cout << "Top Tree ";
        break;

    case 2:
        cout << "Middle Tree ";
        break;

    case 3:
        cout << "Bottom Tree ";
        break;

    default:
        break;
    }
}
//////////////////////
// Element_energy determines the element for the generated energy weapons
//////////////////////
void element_energy(void)
{ 
    time_t seed = time(NULL);

    srand(seed);
    
    choice = 1 + (rand() % 3);

    switch (choice) {

    case 1:
        cout << "Arc ";
        break;

    case 2:
        cout << "Solar ";
        break;

    case 3:
        cout << "Void ";
        break;

    default:
        break;
    }

}

void element_power(void)
{
    time_t seed = time(NULL) + 20;

    srand(seed);

    choice = 1 + (rand() % 3);

    switch (choice) {

    case 1:
        cout << "Arc ";
        break;

    case 2:
        cout << "Solar ";
        break;

    case 3:
        cout << "Void ";
        break;

    default:
        break;
    }

}
//////////////////////
// Stasis randomly generates the  the Stasis setup for a class. 
// 1 is Warlocks, 2 is Hunters, and 3 is Titans.
//////////////////////
int stasis(int classes)
{
    cout << "You Stasis setup is as follows:" << endl;

    int aspect_count = 0;
    int aspect_a = 0;
    int aspect_b = 0;
    int fragment_count = 0;
    int choice = 0;
    time_t seed = time(NULL);

    srand(seed);

    int aspect[2] = { 0 };
    int i = 0;

    while (aspect_count < 2)
    {
        choice = 1 + (rand() % 4); 
        choice = 1 + (rand() % 4); //This reroll of choice eliminate bias towards the number 4 aspect.
        //Ensures that an aspect is not selected two times, as one can only be chosen once
        while (choice == aspect[0] || choice == aspect[1]) 
        {
            choice = 1 + (rand() % 4);
        }

        aspect[i] = choice;
        if (choice == 1)
        {
            if (classes == 1)
            {
                cout << "Ice Flare Bolts" << endl;
                aspect[i] = 1;
                fragment_count += 2;
            }

            if (classes == 2)
            {
                cout << "Winter's Shroud" << endl;
                aspect[i] = 1;
                fragment_count += 1;
            }

            if (classes == 3)
            {
                cout << "Cryoclasm" << endl;
                aspect[i] = 1;
                fragment_count += 1;
            }
        }

        if (choice == 2)
        {

            if (classes == 1)
            {
                cout << "Frost Pulse" << endl;
                aspect[i] = 2;
                fragment_count += 2;
            }

            if (classes == 2)
            {
                cout << "Shatterdive" << endl;
                aspect[i] = 2;
                fragment_count += 1;

            }

            if (classes == 3)
            {
                cout << "Tetonic Harvest" << endl;
                aspect[i] = 2;
                fragment_count += 2;
            }
        }

        if (choice == 3)
        {
            if (classes == 1)
            {
                cout << "Bleak Watcher" << endl;
                aspect[i] = 3;
                fragment_count += 1;
            }

            if (classes == 2)
            {
                cout << "Grim Harvest" << endl;
                aspect[i] = 3;
                fragment_count += 2;

            }

            if (classes == 3)
            {
                cout << "Howl of the Storm" << endl;
                aspect[i] = 3;
                fragment_count += 2;
            }
        }

        if (choice == 4)
        {
            if (classes == 1)
            {
                cout << "Glacial Harvest" << endl;
                aspect[i] = 4;
                fragment_count += 2;
            }

            if (classes == 2)
            {
                cout << "Touch of Winter" << endl;
                aspect[i] = 4;
                fragment_count += 2;

            }

            if (classes == 3)
            {
                cout << "Diamond Spear" << endl;
                aspect[i] = 4;
                fragment_count += 1;
            }
        }


        aspect_count++;
        i++;
    }
    int fragment[5] = { 999,999,999,999,999 };
    i = 0;

    srand(seed);


    while (fragment_count != 0)
    {
        choice = 1 + (rand() % 14);

        //Ensures that a fragment is not selected more than one time
        while (choice == fragment[0] || choice == fragment[1] || choice == fragment[2] || choice == fragment[3] ||
            choice == fragment[4])
        {
            choice = 1 + (rand() % 14);
        }

        switch (choice) {

        case 1:
            fragment[i] = choice;
            cout << "Whisper of Hedrons" << endl;
            break;

        case 2:
            fragment[i] = choice;
            cout << "Whisper of Fissures" << endl;
            break;

        case 3:
            fragment[i] = choice;
            cout << "Whisper of Refraction" << endl;
            break;

        case 4:
            fragment[i] = choice;
            cout << "Whisper of Durance" << endl;
            break;

        case 5:
            fragment[i] = choice;
            cout << "Whisper of Bonds" << endl;
            break;

        case 6:
            fragment[i] = choice;
            cout << "Whisper of Shards" << endl;
            break;

        case 7:
            fragment[i] = choice;
            cout << "Whisper of Chains" << endl;
            break;

        case 8:
            fragment[i] = choice;
            cout << "Whisper of Torment" << endl;
            break;

        case 9:
            fragment[i] = choice;
            cout << "Whisper of Fractures" << endl;
            break;

        case 10:
            fragment[i] = choice;
            cout << "Whisper of Impetus" << endl;
            break;

        case 11:
            fragment[i] = choice;
            cout << "Whisper of Conduction" << endl;
            break;

        case 12:
            fragment[i] = choice;
            cout << "Whisper of Hunger" << endl;
            break;

        case 13:
            fragment[i] = choice;
            cout << "Whisper of Rending" << endl;
            break;

        case 14:
            fragment[i] = choice;
            cout << "Whisper of Rime" << endl;
            break;
        default:
            break;
        }

        fragment_count--;
        i++;
    }
    cout << endl;
    return 0;
}

/////////////////////////////////////
//Subclass prompts the user to input thier prefered class, and then randomly
//selects one of the 4 subclass options: Arc, Solar, Void, or Stasis.
/////////////////////////////////////


void subclass(void)
{
    int classes = 0;
    cout << "Enter the number of the class you want to play" << endl << endl;
    cout << "1. Warlock" << endl << "2. Hunter" << endl << "3. Titan" << endl;
    cin >> classes;
    cout << endl;
    while (classes > 3 || classes < 1)
    {
        cout << "Invalid Selection, please re-enter your selection" << endl;
        cin >> classes;
    }

    time_t seed = time(NULL);

    srand(seed);

    choice = 1 + (rand() % 4);

    switch (choice) {

    case 1:
        tree();
        cout << "Arc ";
        break;

    case 2:
        tree();
        cout << "Solar ";
        break;

    case 3:
        tree();
        cout << "Void ";
        break;

    case 4:
        cout << "Stasis ";
        break;
    default:
        break;
    }


    if (classes == 1)
        cout << "Warlock" << endl << endl;


    if (classes == 2)
        cout << "Hunter" << endl << endl;

    if (classes == 3)
        cout << "Titan" << endl << endl;

    if (choice == 4)
    {
        stasis(classes);
    }
}

/////////////////////////////////////
// The following functions below are the weapons functions.
// These geneerate a random frame type or designate it an exotic
// once the weapon is selected.
/////////////////////////////////////

int auto_rifle(int kinetic)
{

    time_t seed = time(NULL);

    srand(seed);

    if (exotic == 1)
    {
        choice = 1 + (rand() % 4);
    }
    else
    {
        choice = 1 + (rand() % 5);
    }
    switch (choice) {

    case 1:
        cout << "High Impact Frame Auto Rifle" << endl;
        break;

    case 2:
        cout << "Precision Frame Auto Rifle" << endl;
        break;

    case 3:
        cout << "Adaptive Frame Auto Rifle" << endl;
        break;

    case 4:
        cout << "Rapid Fire Frame Auto Rifle" << endl;
        break;

    case 5:

        if (kinetic == 1)
        {
            choice = 1 + (rand() % 7);
            if (choice <= 2)
            {
                cout << "Exotic Auto Rifle" << endl;
                exotic = 1;
            }
            else
            {
                //Since Trace Rifles are only exoitc, they are inccluded with Auto Rifles for the purposes of exotic selection.
                //Trace Rifles are only energy, the kinetic weapon has to be filled first.
                cout << "Exotic Trace Rifle" << endl;
                exotic = 1;
            }
        }

        if (kinetic == 0)
        {
            cout << "Exotic Auto Rifle" << endl;
            exotic = 1;
        }

        break;

    default:
        break;
    }
    return(1);
}

void scout_rifle(void)
{


    time_t seed = time(NULL);

    srand(seed);

    if (exotic == 1)
    {
        choice = 1 + (rand() % 4);
    }
    else
    {
        choice = 1 + (rand() % 5);
    }

    switch (choice) {

    case 1:
        cout << "High Impact Frame Scout Rifle" << endl;
        break;

    case 2:
        cout << "Precision Frame Scout Rifle" << endl;
        break;

    case 3:
        cout << "Lightweight Frame Scout Rifle" << endl;
        break;

    case 4:
        cout << "Rapid Fire Frame Scout Rifle" << endl;
        break;

    case 5:
        cout << "Exotic Scout Rifle" << endl;
        exotic = 1;

    default:
        break;
    }
}

void pulse_rifle(void)
{


    time_t seed = time(NULL);

    srand(seed);

    if (exotic == 1)
    {
        choice = 1 + (rand() % 5);
    }
    else
    {
        choice = 1 + (rand() % 6);
    }

    switch (choice) {

    case 1:
        cout << "High Impact Frame Pulse Rifle" << endl;
        break;

    case 2:
        cout << "Lightweight Frame Pulse Rifle" << endl;
        break;

    case 3:
        cout << "Adaptive Frame Pulse Rifle" << endl;
        break;

    case 4:
        cout << "Rapid Fire Frame Pulse Rifle" << endl;
        break;

    case 5:
        cout << "Aggressive Frame Pulse Rifle" << endl;
        break;

    case 6:
        cout << "Exotic Pulse Rifle" << endl;
        exotic = 1;
        break;

    default:
        break;
    }
}

void hand_cannon(void)
{

    time_t seed = time(NULL);

    srand(seed);

    if (exotic == 1)
    {
        choice = 1 + (rand() % 3);
    }
    else
    {
        choice = 1 + (rand() % 4);
    }

    switch (choice) {

    case 1:
        cout << "Aggressive Frame Hand Cannon" << endl;
        break;

    case 2:
        cout << "Adaptive Frame Hand Cannon" << endl;
        break;

    case 3:
        cout << "Precision Frame Hand Cannon" << endl;
        break;

    case 4:
        cout << "Exotic Hand Cannon" << endl;
        exotic = 1;
        break;

    default:
        break;
    }
}

void submachine_gun(void)
{

    time_t seed = time(NULL);

    srand(seed);

    if (exotic == 1)
    {
        choice = 1 + (rand() % 4);
    }
    else
    {
        choice = 1 + (rand() % 5);
    }

    switch (choice) {

    case 1:
        cout << "Precision Frame Submachine Gun" << endl;
        break;

    case 2:
        cout << "Aggressive Frame Submachine Gun" << endl;
        break;

    case 3:
        cout << "Lightweight Frame Submachine Gun" << endl;
        break;

    case 4:
        cout << "Adaptive Frame Submachine Gun" << endl;
        break;

    case 5:
        cout << "Exotic Submachine Gun" << endl;
        exotic = 1;
        break; 

    default:
        break;
    }
}

int sidearm(int kinetic)
{
    time_t seed = time(NULL);

    srand(seed);

    if (exotic == 1)
    {
        choice = 1 + (rand() % 6);
    }
    else
    {
        choice = 1 + (rand() % 7);
    }

    switch (choice) {

    case 1:
        cout << "Precision Frame Sidearm" << endl;
        break;

    case 2:
        cout << "Lightweight Frame Sidearm" << endl;
        break;

    case 3:
        cout << "Adaptive Frame Sidearm" << endl;
        break;

    case 4:
        if (kinetic == 0)
            cout << "Suros Rapid Fire Frame Sidearm" << endl;

        if (kinetic == 1)
            cout << "Precision Frame Sidearm" << endl;
       
        break;

    case 5:
        cout << "Aggressive Burst Frame Sidearm" << endl;
        break;

    case 6:
        if(kinetic == 0)
            cout << "Omolon Adaptive Frame Sidearm" << endl;
        
        if (kinetic == 1)
            cout << "Adaptive Frame Sidearm" << endl;

        break;

    case 7:
        cout << "Exotic Sidearm" << endl;
        exotic = 1;
        break;

    default:
        break;
    }
    return 0;
}

void bow(void)
{

    time_t seed = time(NULL);

    srand(seed);

    if (exotic == 1)
    {
        choice = 1 + (rand() % 2);
    }
    else
    {
        choice = 1 + (rand() % 3);
    }

    switch (choice) {


    case 1:
        cout << "Precision Frame Bow" << endl;
        break;

    case 2:
        cout << "Lightweight Frame Bow" << endl;
        break;

    case 3:
        cout << "Exotic Bow" << endl;
        exotic = 1;
        break;

    default:
        break;
    }
}

void shotgun(void)
{

    time_t seed = time(NULL);

    srand(seed);

    if (exotic == 1)
    {
        choice = 1 + (rand() % 4);
    }
    else
    {
        choice = 1 + (rand() % 5);
    }

    switch (choice) {

    case 1:
        cout << "Precision Frame Shotgun" << endl;
        break;

    case 2:
        cout << "Aggressive Frame Shotgun" << endl;
        break;

    case 3:
        cout << "Lightweight Frame Shotgun" << endl;
        break;

    case 4:
        cout << "Rapid-Fire Frame Shotgun" << endl;
        break;

    case 5:
        cout << "Exotic Shotgun" << endl;
        exotic = 1;
        break;

    default:
        break;
    }
}

void sniper_rifle(void)
{
    time_t seed = time(NULL);

    srand(seed);

    if (exotic == 1)
    {
        choice = 1 + (rand() % 3);
    }
    else
    {
        choice = 1 + (rand() % 4);
    }

    switch (choice) {

    case 1:
        cout << "Adaptive Frame Sniper Rifle" << endl;
        break;

    case 2:
        cout << "Rapid Fire Frame Sniper Rifle" << endl;
        break;

    case 3:
        cout << "Aggressive Frame Sniper Rifle" << endl;
        break;

    case 4:
        cout << "Exotic Sniper Rifle" << endl;
        exotic = 1;
        break;


    default:
        break;
    }
}

int grenade_launcher(int kinetic)
{
    time_t seed = time(NULL);

    srand(seed);

    if (exotic == 1)
    {
        choice = 1 + (rand() % 2);
    }
    else
    {
        choice = 1 + (rand() % 3);
    }

    switch (choice) {

    case 1:
        cout << "Lightweight Frame Grendade Launcher" << endl;
        break;

    case 2:
        if(kinetic == 0)
            cout << "Wave-Frame Grenade Launcher" << endl;

        if (kinetic == 1)
            cout << "Lightweight Frame Grenade Launcher" << endl;

        break;

    case 3:
        cout << "Exotic Grenade Launcher" << endl;
        exotic = 1;
        break;


    default:
        break;
    }
    return 0;
}

void fusion_rifle(void)
{
    time_t seed = time(NULL);

    srand(seed);

    if (exotic == 1)
    {
        choice = 1 + (rand() % 5);
    }
    else
    {
        choice = 1 + (rand() % 6);
    }

    switch (choice) {

    case 1:
        cout << "Precision Frame Fusion Rifle" << endl;
        break;

    case 2:
        cout << "Adaptive Frame Fusion Rifle" << endl;
        break;

    case 3:
        cout << "Rapid Fire Frame Fusion Rifle" << endl;
        break;

    case 4:
        cout << "Aggressive Frame Fusion Rifle" << endl;
        break;

    case 5:
        cout << "High Impact Frame Fusion Rifle" << endl;
        break;

    case 6:
        cout << "Exotic Fusion Rifle" << endl;
        exotic = 1;
        break;


    default:
        break;
    }
}

void heavy_grenade(void)
{


    time_t seed = time(NULL);

    srand(seed);

    if (exotic == 1)
    {
        choice = 1 + (rand() % 2);
    }
    else
    {
        choice = 1 + (rand() % 3);
    }


    switch (choice) {

    case 1:
        cout << "Adaptive Frame Grenade Launcher" << endl;
        break;

    case 2:
        cout << "Rapid Fire Frame Grenade Launcher" << endl;
        break;

    case 3:
        cout << "Exotic Grenade Launcher" << endl;
        exotic = 1;
        break;


    default:
        break;
    }
}

void machine_gun(void)
{


    time_t seed = time(NULL);

    srand(seed);

    if (exotic == 1)
    {
        choice = 1 + (rand() % 3);
    }
    else
    {
        choice = 1 + (rand() % 4);
    }


    switch (choice) {

    case 1:
        cout << "Adaptive Frame Machine Gun" << endl;
        break;

    case 2:
        cout << "High Impact Frame Machine Gun" << endl;
        break;

    case 3:
        cout << "Rapid Fire Frame Machine Gun" << endl;
        break;

    case 4:
        cout << "Exotic Machine Gun" << endl;
        exotic = 1;
        break;
        ;

    default:
        break;
    }
}

void linear_fusion(void)
{

    time_t seed = time(NULL);

    srand(seed);
    
    if (exotic == 1)
    {
        choice = 1;
    }
    else
    {
        choice = 1 + (rand() % 2);
    }

    //Since Linear Fusions have only 1 frame type, this helps reduce bias towards exotic linear fusions

    switch (choice) {

    case 1:
        cout << "Precision Frame Linear Fusion Rifle" << endl;
        cout << " " << endl;
        break;

    case 2:
        cout << "Exotic Linear Fusion Rifle" << endl;
        cout << " " << endl;
        exotic = 1;
        break;

    default:
        break;
    }
}

void rocket_launcher(void)
{

    time_t seed = time(NULL);

    srand(seed);

    if (exotic == 1)
    {
        choice = 1 + (rand() % 4);
    }
    else
    {
        choice = 1 + (rand() % 5);
    }


    switch (choice) {

    case 1:
        cout << "Adaptive Frame Rocket Launcher" << endl;
        break;

    case 2:
        cout << "High Impact Frame Rocket Launcher" << endl;
        break;

    case 3:
        cout << "Aggressive Frame Rocket Launcher" << endl;
        break;

    case 4:
        cout << "Precision Rocket Launcher" << endl;
        break;

    case 5:
        cout << "Exotic Rocket Launcher" << endl;
        exotic = 1;
        break;


    default:
        break;
    }
}

void sword(void)
{

    time_t seed = time(NULL);

    srand(seed);

    if (exotic == 1)
    {
        choice = 1 + (rand() % 5);
    }
    else
    {
        choice = 1 + (rand() % 6);
    }
    ;

    switch (choice) {

    case 1:
        cout << "Caster Frame Sword" << endl;
        break;

    case 2:
        cout << "Aggressive Frame Sword" << endl;
        break;

    case 3:
        cout << "Lightweight Frame Sword" << endl;
        break;

    case 4:
        cout << "Adaptive Frame Sword" << endl;
        break;

    case 5:
        cout << "Vortex Frame Sword" << endl;
        break;

    case 6:
        cout << "Exotic Sword" << endl;
        exotic = 1;
        break;

    default:
        break;
    }
}
///////////////////////
// This generates the Kinetic Weapon
//////////////////////
void kinetic(void)
{

    choice = 1 + (rand() % 10);
    int kinetic = 1;
    switch (choice) {

    case 1:
        auto_rifle(kinetic);
        break;

    case 2:
        scout_rifle();
        break;

    case 3:
        pulse_rifle();
        break;

    case 4:
        hand_cannon();
        break;

    case 5:
        submachine_gun();
        break;

    case 6:
        sidearm(kinetic);
        break;

    case 7:
        bow();
        break;

    case 8:
        shotgun();
        break;

    case 9:
        sniper_rifle();
        break;

    case 10:
        grenade_launcher(kinetic);
        break;
    }
    cout << endl;
}
///////////////////////
// This generates the Energy Weapon
//////////////////////
void energy(void)
{
    int kinetic = 0;

    element_energy();

    choice = 1 + (rand() % 11);

    switch (choice) {

    case 1:
        auto_rifle(kinetic);
        break;

    case 2:
        scout_rifle();
        break;

    case 3:
        pulse_rifle();
        break;

    case 4:
        hand_cannon();
        break;

    case 5:
        submachine_gun();
        break;

    case 6:
        sidearm(kinetic);
        break;

    case 7:
        bow();
        break;

    case 8:
        shotgun();
        break;

    case 9:
        sniper_rifle();
        break;

    case 10:
        fusion_rifle();
        break;

    case 11:
        grenade_launcher(kinetic);
        break;
    }
    cout << endl;
}
///////////////////////
// This generates the Heavy Weapon
//////////////////////
void heavy(void)

{
    element_power();

    choice = 1 + (rand() % 5);

    switch (choice) {

    case 1:
        heavy_grenade();
        break;

    case 2:
        sword();
        break;

    case 3:
        rocket_launcher();
        break;

    case 4:
        linear_fusion();
        break;

    case 5:
        machine_gun();
        break;

    default:
        break;
    }
    exotic = 0; //Resets the tracker marking if an exoitc is selected
    cout << endl;
}
